@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<ApplicationUser>
@{
    <h2>User Management</h2>

    <form asp-action="Index" method="get">
        <div class="form-row">
            <div class="form-group col-md-4">
                <input type="text" name="searchString" class="form-control"
                       placeholder="Search by name or username" value="@ViewData["CurrentFilter"]" />
            </div>
            <div class="form-group col-md-3">
                <select name="roleFilter" class="form-control" asp-items="ViewBag.Roles">
                    <option value="">All Roles</option>
                </select>
            </div>
            <div class="form-group col-md-2">
                <input type="submit" value="Filter" class="btn btn-primary" />
            </div>
        </div>
    </form>

    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Name</th>
                <th>Role</th>
                <th>Team</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.Role?.Name</td>
                    <td>@user.Team?.Name</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@user.Id" class="btn btn-info">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchString = ViewData["CurrentFilter"], roleFilter = ViewData["RoleFilter"] }))

}
